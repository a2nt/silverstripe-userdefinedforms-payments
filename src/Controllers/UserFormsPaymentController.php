<?php


namespace A2nt\UserFormsPayments\Controllers;

use Omnipay\PayPal\PayPalItem;
use SilverStripe\Control\Controller;
use SilverStripe\Control\Director;
use SilverStripe\Control\HTTPRequest;
use SilverStripe\Control\HTTPResponse;
use SilverStripe\Forms\FieldList;
use SilverStripe\Forms\Form;
use SilverStripe\Forms\FormAction;
use SilverStripe\Forms\HiddenField;
use SilverStripe\Forms\RequiredFields;
use SilverStripe\Omnipay\GatewayFieldsFactory;
use SilverStripe\Omnipay\GatewayInfo;
use SilverStripe\Omnipay\Model\Payment;
use SilverStripe\Omnipay\Service\ServiceFactory;
use SilverStripe\UserForms\Model\Submission\SubmittedForm;

class UserFormsPaymentController extends \PageController
{
    private static $url_segment = '/userpayment';

    private static $allowed_actions = [
        'pay',
        'complete',
        'canceled',
        'Form',
    ];

    private static $allowed_objects = [
        'SubmittedForm' => SubmittedForm::class,
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    private $object;

    protected function getShortPayableObjectName($class)
    {
        $allowed = self::$allowed_objects;
        return array_search($class, $allowed);
    }

    protected function getPayableObjectClass($short_name)
    {
        $allowed = self::$allowed_objects;
        return $allowed[$short_name];
    }

    public function getPayableObject($new_params = [])
    {
        if ($this->object) {
            return $this->object;
        }

        $allowed = self::$allowed_objects;

        $request = $this->getRequest();
        $params = array_merge($request->allParams(), $new_params);
        $class = $params['ID'];
        $ID = $params['OtherID'];

        if (!$ID || !$class || !array_key_exists($class, $allowed)) {
            return false;
        }

        $class = $this->getPayableObjectClass($class);
        $obj = $class::get()->byID($ID);

        if (!$obj) {
            return false;
        }

        $this->object = $obj;

        return $this->object;
    }

    public function complete(HTTPRequest $request)
    {
        die('The payment is received. Thank you! <a href="'.Director::absoluteBaseURL().'">Go back</a>');
        return $this->render();
    }

    public function canceled(HTTPRequest $request)
    {
        die('Payment was canceled. <a href="'.Director::absoluteBaseURL().'">Go back</a>');
        return $this->render();
    }

    public function pay(HTTPRequest $request)
    {
        $obj = $this->getPayableObject();
        if (!$obj) {
            return $this->httpError(404);
        }

        return $this->render();
    }

    protected function getGateway()
    {
        $gateways = GatewayInfo::getSupportedGateways();
        return array_keys($gateways)[0];
    }

    public function Form()
    {
        $obj = $this->getPayableObject();
        if (!$obj) {
            return $this->httpError(404);
        }

        $gateway = $this->getGateway();

        // direct payment processing
        switch ($gateway) {
            case 'PayPal_Express':
                $response = $this->processPayment($obj);
                $response->redirectOrRespond()->output();
                exit();
                return $response->redirectOrRespond();
                break;
        }

        $factory = GatewayFieldsFactory::create($gateway);
        $fields = $factory->getFields();

        $allowed = self::$allowed_objects;
        $class = $this->getShortPayableObjectName(get_class($obj));

        $fields->push(HiddenField::create('ID', $class));
        $fields->push(HiddenField::create('OtherID', $obj->getField('ID')));

        return Form::create(
            $this,
            'Form',
            $fields,
            FieldList::create(FormAction::create(
                'doSubmit',
                _t('Checkout.PayNow', 'Pay Now')
            )),
            RequiredFields::create(['ID', 'OtherID'])
        );
    }

    protected function processPayment($obj, $data = [])
    {
        $gateway = $this->getGateway();

        $payment = Payment::create()
            ->init($gateway, $obj->Amount, 'USD')
            ->setSuccessUrl($this->Link('complete').'/'.$this->getShortPayableObjectName(get_class($obj)).'/'.$obj->ID)
            ->setFailureUrl($this->Link('canceled').'/'.$this->getShortPayableObjectName(get_class($obj)).'/'.$obj->ID);

        $payment->setField('SubmittedFormID', $obj->ID);
        $payment->write();

        $items = $obj->getPaymentItems();
        $data['items'] = $items;

        $data['rp_invoice_id'] = $obj->OrderID;
        $data['custom'] = $obj->OrderID;
        $data['invoice'] = $obj->OrderID;

        //https://www.paypal.com/webapps/xorouter?cmd=_xclick
	    //&notify_url=https%3A%2F%2Fwww.folkus.org%2Fwp-admin%2Fadmin-ajax.php%3Faction%3Dfrm_payments_paypal_ipn
	    //&custom=997%7C485eeee0687b148028c1de8f398edbfa
	    //&amount=50
	    //&bn=FormidablePro_SP
	    //&business=paypal%40folkus.org
	    //&currency_code=USD
	    //&item_name=Purchase+membership
	    //&return=http%3A%2F%2Fwww.folkus.org
	    //&cancel_return=http%3A%2F%2Fwww.folkus.org
	    //&rm=1
	    //&invoice=200-QQI&Z3JncnB0=
        $response = ServiceFactory::create()
            ->getService($payment, ServiceFactory::INTENT_PURCHASE)
            ->initiate($data);

        /* @var \SilverStripe\Omnipay\Service\ServiceResponse $response */
        return $response;
    }

    public function doSubmit($data, $form)
    {
        $obj = $this->getPayableObject($data);
        if (!$obj) {
            return $this->httpError(404);
        }

        if ($obj->Amount > 0) {
            $response = $this->processPayment($obj, $data);
            return $response->redirectOrRespond();
        }

        die('ERROR 00-'.__CLASS__.'_'.__FUNCTION__.': wrong amount');
    }

    public function Link($action = null)
    {
        return Controller::join_links(self::$url_segment, $action);
    }

    public function DefaultContainer()
    {
        return 'container';
    }
}
